#!C:\Perl64\bin
#------------------------------------------------------------------------------------------------------------------------------------------------------
# HEADING:		HTML_Parser.pl	
# DESCRIPTION:	HTML_Parser.pl file is used to create CheckStyle.config file which is required by PMDSolutionTool.pl from checkstyle_report.html
# AUTHOR:	 	Jigar Rudani
#				Application Modernization
#				HP Global Delivery - India
# CREATED DATE:	5 May 2013
# VERSION:		1.0	
# USAGE: 		The Script requires 3 arguments which are supplied by PMDSolutionTool.pl
#            	1. HTML File Name
#            	2. CheckStyle error mapping file name
#				3. Config file name
#------------------------------------------------------------------------------------------------------------------------------------------------------
############################################################ Global Variables Declaration Area ########################################################
%CheckStyle_Error_Hashes = ();
@Existing_Line = ();
$Files_Pattern = "<h3>File ";
$strFinalValues = "";
$Final_PreparedData = "";
$line_iterator = 0;
$count_lines = 0;
$length_Existing_Line = 0;
$current_line = 0;
$current_value = 0;
########################################################### Checking the parameter passed to the script ###############################################
$HTMLFile = $ARGV[0];
$CheckStyleErrorFileName = $ARGV[1];
$Config_File_Name = $ARGV[2];
$Number_of_arguments = $#ARGV+1;
if ($Number_of_arguments != 3)
{
        usage(255);
}
############################################################ Calling Area #############################################################################
Create_CheckStyle_Error_List_HashMap("$CheckStyleErrorFileName");
Remove_Output_Already_Existed_File("$Config_File_Name");
HTML_Parser("$HTMLFile");
############################################################ Function Declaration Area ################################################################
sub Print_Values
{
	my ($Variable_name,$Variable_value) = @_;
	print "The value of $Variable_name  is : $Variable_value\n"
} # End of Print_Values()
sub usage
{
	my ($Error_code) = @_;
	if ($Error_code == 255 )
	{
		print "The Script requires 3 arguments which are supplied by PMDSolutionTool.pl\n";
		print "1. checkstyle_errors.html a HTML Report generated by PMD Tool\n";
		print "2. Mapping File which maps the CheckStyle Error to be resolved to a Number e.g CheckStyle_Error_List.txt\n";
		print "3. Config File Name \n";
		exit
	}	
} # End of usage()
sub Create_CheckStyle_Error_List_HashMap
{
	my ($CheckStyle_Error_List_File_Name) = @_;
	#printf "Creating CheckStyle Error HashMap with Error Description as Keys and Changes as Values\n";
	open(File_Hndlr,"$CheckStyle_Error_List_File_Name");
	while(my $checkstyle_error_content = <File_Hndlr>)
	{		
		@splitValues=split(':::', $checkstyle_error_content);
		$intLength_Array=$#splitValues+1;
		$CheckStyle_Error_Hashes{"$splitValues[0]"} = "$splitValues[1]";

	}
	close(File_Hndlr);
	while (($key, $value) = each %CheckStyle_Error_Hashes)
	{
	#	print "$key changes mapped to $CheckStyle_Error_Hashes{$key}\n";
	}
	#printf "CheckStyle Error HashMap created\n";	
} # End of Create_CheckStyle_Error_List_HashMap()
sub write_to_config_file
{
	my($output_config_file_name,$config_data) = @_;
	open(my $outfh, '>>', $output_config_file_name) or die "Could not open file '$output_file_name' $!";
	print $outfh "$config_data\n";
	close $outfh;
} # End of write_to_config_file()
sub Remove_Output_Already_Existed_File						# Delete the Output File if already exist
{
	my($OutputFileName) = @_;
	if (-e "$OutputFileName")
	{
			if (unlink($OutputFileName) == 0)
			{
				print "File was not deleted.\n";
			} else {
				print "File deleted successfully.\n";
			}
	}
	else
	{
		print "File not exist\n";
	}	
} # End of Remove_Output_Already_Existed_File()
sub HTML_Parser
{
	my ($HTML_File_Name) = @_;
	printf "Processing $HTML_File_Name\n";
	$Lines = 0;
	
	open(HTML_File_Hndlr,"$HTML_File_Name");
	while(my $html_content = <HTML_File_Hndlr>)
	{		
		chomp($html_content);
		$length_content = length($html_content);
		$Lines = $Lines + 1;
		if ($html_content =~ m/$Files_Pattern/)
		{
			#Check to see if there is anything left to write
			$count_lines = 0;
			$length_Existing_Line = $#Existing_Line + 1;
			if ($length_Existing_Line != 0)
			{
				for ($i = 1;$i < $length_Existing_Line;$i++)
				{
					$strFinalValues = $strFinalValues . $Existing_Line[$i];
				}
				$Final_PreparedData = $Existing_Line[0] . "," . $strFinalValues;
				write_to_config_file($Config_File_Name,$Final_PreparedData);
				@Existing_Line = (); 							# Resetting to Default values
				$Final_PreparedData = "";
				$strFinalValues = "";
			}
			$File_Name_to_Config_File = ($html_content =~ /<h3>(.*)<\/h3>/);
			$File_Name_to_Config_File = $1;
			$Final_Data = $File_Name_to_Config_File;
			write_to_config_file($Config_File_Name,$Final_Data);
			#print $html_content =~ /<h3>(.*)<\/h3>/;
			#print "\n------\n";
		}
		while (($key, $value) = each %CheckStyle_Error_Hashes)
		{
			$search_error_description = "$key";									# Error Description from Checkstyle.html
			$value_representing_error = $CheckStyle_Error_Hashes{$key};			# Value representing changes as per the CheckStyle_Error_List.txt
			if ($html_content =~ m/$search_error_description/)
			{
				$html_content =~ m/<td>(\d+)/;									# Extracting Line Number
				$Line_Number = $1;
				#print "$search_error_description ---> $Line_Number,$CheckStyle_Error_Hashes{$search_error_description}";
				$final_config_content = "$Line_Number,$CheckStyle_Error_Hashes{$search_error_description}";
				#print "$final_config_content";
				chomp($final_config_content);
				# Logic to merge same lines
				@LineValues=split(',', $final_config_content);
				$current_line = $LineValues[0];
				$current_value = $LineValues[1];
				if ($current_line == $Existing_Line[0])
				{
					$Existing_Line[$line_iterator] = $current_value;
					$line_iterator = $line_iterator + 1;
					$count_lines = $count_lines + 1;
				}
				elsif ($count_lines > 0)
				{
					$length_Existing_Line = $#Existing_Line + 1;
					for ($i = 1;$i < $length_Existing_Line;$i++)
					{
						$strFinalValues = $strFinalValues . $Existing_Line[$i];
					}
					$Final_PreparedData = $Existing_Line[0] . "," . $strFinalValues;
					write_to_config_file($Config_File_Name,$Final_PreparedData);
					@Existing_Line = (); 							# Resetting to Default values
					$Final_PreparedData = "";
					$strFinalValues = "";
					$Existing_Line[0] = $current_line;
					$Existing_Line[1] = $current_value;
					$count_lines = 1;
					$line_iterator = 2;
					
				}
				else
				{
					$Existing_Line[0] = $current_line;
					$Existing_Line[1] = $current_value;
					$line_iterator = 2;
					$count_lines = 1;
				}				
			}	# End of if
		}	# End of While	
	}
	
	#Check to see if there is anything left to write
	$length_Existing_Line = $#Existing_Line + 1;
	if ($length_Existing_Line != 0)
	{
		for ($i = 1;$i < $length_Existing_Line;$i++)
		{
			$strFinalValues = $strFinalValues . $Existing_Line[$i];
		}
		$Final_PreparedData = $Existing_Line[0] . "," . $strFinalValues;
		write_to_config_file($Config_File_Name,$Final_PreparedData);
		@Existing_Line = (); 							# Resetting to Default values
		$Final_PreparedData = "";
		$strFinalValues = "";
	}
	close(HTML_File_Hndlr);
} # End of HTML Parser()